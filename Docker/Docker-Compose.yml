services:
  # MySQL 容器配置
  mysql-service:
    container_name: mysql-service
    image: mysql:latest
    environment:
      MYSQL_ROOT_HOST: '%'
      # 密码根据情况修改，以 pswd 为例
      MYSQL_ROOT_PASSWORD: pswd
      TZ: 'Asia/Shanghai'
    ports:
      # 端口映射默认为 3306，根据情况修改
      - '3306:3306'
    volumes:
      # 卷名需要自行修改，以 yourvolume 为例
      - yourvolume:/var/lib/mysql
    restart: always
  # Node.js 容器配置
  node-service:
    container_name: node-service
    # 使用 node18，可以根据自己需求更改版本
    image: node:18
    working_dir: /home/node/app
    # 运行命令根据情况修改
    command: npm run dev
    # 端口映射默认为 5173，根据情况修改
    ports:
      - '5173:5173'
    # 前端项目的相对路径需要自行修改，以 ./yournodeprj 为例
    volumes:
      - ./yournodeprj:/home/node/app
    restart: always
  # 你的后端应用，基于 tomcat、springboot 等
  main-service:
    container_name: main-service
    # 后端项目的相对路径需要自行修改，以 ./yourapplicationpath 为例，需要 Dockerfile
    build: ./yourapplicationpath
    # 端口映射默认为 8080，根据情况修改
    ports:
      - '8080:8080'
    restart: always

# 卷配置，需要允许外部访问
volumes:
  yourvolume:
    external: true
